from pptx import Presentation
from dotenv import load_dotenv
import os
import google.generativeai as genai

load_dotenv()
genai.configure(api_key=os.getenv("API_KEY"))

# Function to generate content for all slides
def generate_slide_contents(topic, num_slides):
    model = genai.GenerativeModel("gemini-2.0-flash")  # Use the correct model
    slide_contents = []
    
    prompt = (
        f"Provide sufficient content for '{topic}' and separate them in '{num_slides} paragraphs..Keep the paras very concise and short. No bullet points just paragraphs")
    
    # Send prompt to Gemini for content generation
    response = model.generate_content(prompt)
    raw = response.text.strip()
    
    # Split the response by blank lines to create different content for each slide
    slides_data = raw.split('\n\n')  # Splitting based on double newline (paragraphs)
    
    # Now we ensure that we only have the correct number of slides
    for i in range(min(len(slides_data), num_slides)):
        slide_contents.append(slides_data[i].strip())
    
    return slide_contents


# Function to create the PowerPoint presentation
def create_multi_slide_presentation(topic, all_slide_points, filename="presentation.pptx"):
    prs = Presentation()
    
    # Add Title Slide
    title_slide = prs.slides.add_slide(prs.slide_layouts[0])  # Title slide
    title_slide.shapes.title.text = topic.title()
    title_slide.placeholders[1].text = "Generated by Iris Voice Assistant"
    
    # Add Content Slides
    for i, content in enumerate(all_slide_points, start=1):
        slide = prs.slides.add_slide(prs.slide_layouts[1])  # Content slide
        slide.shapes.title.text = f"Slide {i} - {topic.title()}"
        content_placeholder = slide.placeholders[1]
        
        # Split content into paragraphs and add them to the slide
        paragraphs = content.split('\n')
        content_placeholder.text = '\n'.join(paragraphs)

    # Save the presentation
    prs.save(filename)
    return filename